#!/usr/bin/env python3
"""
Tele Kanban Bot - Main Entry Point
H·ªó tr·ª£ nhi·ªÅu c√°ch ch·∫°y: bot, dashboard, ho·∫∑c c·∫£ hai
"""

import sys
import os
import argparse
import threading
import time
import logging

# Thi·∫øt l·∫≠p logging tr∆∞·ªõc
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Add src to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def run_bot():
    """Ch·∫°y Telegram bot"""
    try:
        from src.bot.telegram_handler import TelegramKanbanBot
        from src.config import settings
        
        logger.info("ü§ñ Kh·ªüi ƒë·ªông Telegram Bot...")
        
        # Hi·ªÉn th·ªã th√¥ng tin proxy n·∫øu c√≥
        if hasattr(settings, 'PROXY_ENABLED') and settings.PROXY_ENABLED:
            logger.info(f"üåê S·ª≠ d·ª•ng proxy: {settings.PROXY_URL}")
        else:
            logger.info("üåê Kh√¥ng s·ª≠ d·ª•ng proxy (m√¥i tr∆∞·ªùng nh√†)")
        
        bot = TelegramKanbanBot()
        bot.run()
    except Exception as e:
        logger.error(f"‚ùå L·ªói ch·∫°y bot: {e}")
        import traceback
        traceback.print_exc()

def run_dashboard():
    """Ch·∫°y web dashboard"""
    try:
        from src.config import settings
        from src.web.dashboard import app
        logger.info("üåê Kh·ªüi ƒë·ªông Web Dashboard...")
        
        # Production mode: s·ª≠ d·ª•ng PORT t·ª´ environment
        port = int(os.getenv('PORT', getattr(settings, 'WEB_PORT', 8080)))
        host = '0.0.0.0'
        
        logger.info(f"‚úÖ Dashboard: http://{host}:{port}")
        logger.info(f"üåê Environment: Production (Render.com)")
        
        app.run(host=host, port=port, debug=False, threaded=True)
    except Exception as e:
        logger.error(f"‚ùå L·ªói ch·∫°y dashboard: {e}")
        import traceback
        traceback.print_exc()

def check_dependencies():
    """Ki·ªÉm tra dependencies"""
    try:
        import telegram
        import flask
        import requests
        return True
    except ImportError as e:
        logger.error(f"‚ùå Thi·∫øu dependencies: {e}")
        logger.error("üì¶ Ch·∫°y: pip install -r requirements.txt")
        return False

def check_config():
    """Ki·ªÉm tra config"""
    # Check if running on Render (production)
    if os.getenv('RENDER'):
        logger.info("üåç Running on Render (Production)")
        # Check required environment variables for production
        if not os.getenv('BOT_TOKEN'):
            logger.error("‚ùå BOT_TOKEN environment variable is required!")
            return False
        if not os.getenv('MY_USER_ID'):
            logger.error("‚ùå MY_USER_ID environment variable is required!")
            return False
        logger.info("‚úÖ Environment variables OK")
        return True
    
    # Development mode: use settings file
    if not os.path.exists('src/config/settings.py'):
        logger.error("‚ùå Ch∆∞a c√≥ file src/config/settings.py!")
        logger.error("üìù Copy src/config/example.py th√†nh src/config/settings.py v√† ƒëi·ªÅn th√¥ng tin")
        return False
    return True

def main():
    parser = argparse.ArgumentParser(description='Tele Kanban Bot')
    parser.add_argument('--mode', choices=['bot', 'web', 'both'], default='both',
                       help='Ch·∫ø ƒë·ªô ch·∫°y: bot, web, ho·∫∑c both (m·∫∑c ƒë·ªãnh: both)')
    
    args = parser.parse_args()
    
    logger.info("üöÄ Tele Kanban Bot - AI Smart Task Manager")
    logger.info("=" * 50)
    
    # Ki·ªÉm tra config v√† dependencies
    if not check_config() or not check_dependencies():
        sys.exit(1)
    
    try:
        if args.mode == 'bot':
            run_bot()
        elif args.mode == 'web':
            run_dashboard()
        elif args.mode == 'both':
            logger.info("üîÑ Ch·∫°y c·∫£ Bot v√† Dashboard...")
            
            # Ch·∫°y dashboard trong thread ri√™ng
            dashboard_thread = threading.Thread(target=run_dashboard, daemon=True)
            dashboard_thread.start()
            
            # ƒê·ª£i dashboard kh·ªüi ƒë·ªông
            time.sleep(2)
            
            # Ch·∫°y bot trong main thread
            run_bot()
            
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è  ƒêang d·ª´ng...")
    except Exception as e:
        logger.error(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
